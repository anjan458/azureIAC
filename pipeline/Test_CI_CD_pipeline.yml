name: Testing_CICD-Pipeline
on:
  workflow_dispatch:
  push:
    branches:
      - develop
  pull_request:
    branches:
      - develop
jobs:
  codeQL-analyze:
    name: codeQL analyze
    runs-on: [self-hosted]
    permissions:
      actions: read
      contents: read
      security-events: write
    strategy:
      fail-fast: false
      matrix:
        language: ["java"]
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    - name: Set up JDK 21
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '21'
        overwrite-settings: false
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: 'java'
        queries: security-extended,security-and-quality
    - name: Autobuild
      uses: github/codeql-action/autobuild@v2
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
  java-maven-Sonar:
    name: sonar scan
    runs-on: [uhg-runner]
    steps:
      - name: Cleanup #https://github.com/actions/checkout/issues/211
        run: |
          sudo chown -R $USER:$USER $GITHUB_WORKSPACE
      - name: Checkout #https://github.com/actions/checkout/issues/211
        uses: actions/checkout@v3
        with:
          #Full git history is needed for Sonar blame
          fetch-depth: 0
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: 21
          distribution: "adopt"
          cache: maven
      - name: Setup Maven
        uses: uhg-actions/setup-maven@v4.4
        with:
          maven-version: 3.6.0
      - name: Cache
        uses: actions/cache@v3
        with:
          path: /home/runner/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - name: Build and Sonar Analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GHEC_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: mvn -B -e verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -DskipTests -Dsonar.projectBaseDir=src -Dsonar.buildbreaker.skip=true -Dmaven.repo.local=/home/runner/.m2/repository
      #run: mvn clean verify
      - name: SonarQube Scan
        uses: uhg-actions/sonarqube-scan-action@master
        with:
          projectBaseDir: .
          args: >
            -Dsonar.qualitygate.wait=true
            -Dsonar.buildbreaker.skip=true
            -Dsonar.projectKey=com.optumrx.m3p:orx-m3p-experience-api
            -Dsonar.sources=.
            -Dsonar.verbose=true
            -Dsonar.java.binaries=target/classes
            -Dsonar.verbose=true
        env:
          SONAR_TOKEN: "${{ secrets.SONAR_TOKEN }}"
          SONAR_HOST_URL: "${{ secrets.SONAR_HOST_URL }}"
      - name: SonarQube Quality Gate check
        id: sonarqube-quality-gate-check
        uses: uhg-actions/sonarqube-quality-gate-action@master
        #Force to fail step after specific time.
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }} #OPTIONAL
          #Optionally you can use the output from the Quality Gate in another step.
          #The possible outputs of the `quality-gate-status` variable are `PASSED`, `WARN` or `FAILED`.
      - name: "Example show SonarQube Quality Gate Status value"
        run: echo "The Quality Gate status is ${{ steps.sonarqube-quality-gate-check.outputs.quality-gate-status }}"
  
  junit:
    name: junit test
    runs-on: uhg-runner
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    - name: Set up Java 
      uses: actions/setup-java@v3
      with:
        java-version: '11' 
        distribution: 'temurin' 
    - name: Run JUnit tests
      run: mvn test

#  auto-merge:
#    name: auto merge
#    runs-on: uhg-runner
#    needs: [ codeQL-analyze , java-maven-Sonar , junit]
#    if: ${{ always() }}
#    permissions:
#      contents: write
#    steps:
#      - id: automerge
#        name: automerge
#        uses: pascalgn/automerge-action@v0.16.3 
#        env:
#          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"

  build-dev:
    name: build DEV
    permissions:
      contents: read
      id-token: write
      # runs-on: ubuntu-latest
    runs-on: uhg-runner
    needs: [ codeQL-analyze , java-maven-Sonar , junit]
    if: ${{ success() }}
    environment: Development
    steps:
      - name: build-dev success
        run: echo "Build-dev Success"
        shell: bash 
  deploy-dev:
    name: Deploy DEV
    permissions:
      actions: read
      contents: read
      id-token: write
    # runs-on: ubuntu-latest
    runs-on: uhg-runner
    needs: build-dev
    if: ${{ (github.event_name == 'push'|| github.event_name == 'workflow_dispatch') && success() }}
    environment: Development
    steps:
      - name: deploy-dev success
        run: echo "Deploy-dev Success"
        shell: bash 
